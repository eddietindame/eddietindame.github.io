{"version":3,"file":"static/webpack/static/development/pages/work.js.6b90bb5f5dbe2522e32e.hot-update.js","sources":["webpack:///./components/Image/Image.js","webpack:///./components/Video/Video.js"],"sourcesContent":["import React from 'react'\nimport { string, object, func } from 'prop-types'\nimport { useSpring, animated } from 'react-spring'\nimport Img from 'react-image'\nimport './Image.scss'\n\nconst Image = ({\n    className,\n    animation,\n    image,\n    alt,\n    onTouchStart,\n    onTouchEnd\n}) => {\n    const _animation = animation ? useSpring(animation) : undefined\n    const Element = animation ? animated.div : 'div'\n\n    return (\n        <Element\n            className={(className ? className + ' ' :  '') + 'image'}\n            onTouchStart={onTouchStart}\n            onTouchEnd={onTouchEnd}\n            style={_animation}\n        >\n            <Img\n                src={image}\n                alt={alt}\n                className=\"image__inner\"\n                loader={\n                    <div className=\"image__inner\">\n                        <div className=\"image__loader loader\" />\n                    </div>\n                }\n            />\n        </Element>\n    )\n}\n\nImage.propTypes = {\n    className: string,\n    animation: object,\n    image: string.isRequired,\n    alt: string.isRequired,\n    onTouchStart: func,\n    onTouchEnd: func\n}\n\nexport default Image\n","import React, { useEffect, useState, useRef } from 'react'\nimport { string, object, func } from 'prop-types'\nimport { useSpring, animated } from 'react-spring'\nimport './Video.scss'\n\nconst Video = ({\n    className,\n    animation,\n    video,\n    onTouchStart,\n    onTouchEnd\n}) => {\n    const videoRef = useRef()\n    const [isVideoLoaded, setIsVideoLoaded] = useState(false)\n    const _animation = animation ? useSpring(animation) : undefined\n    const Element = animation ? animated.div : 'div'\n    const _onVideoLoaded = () => { setIsVideoLoaded(true) }\n\n    useEffect(() => {\n        const videoElement = videoRef.current\n        videoElement.addEventListener('canplay', _onVideoLoaded)\n        return () => { videoElement.removeEventListener('canplay', _onVideoLoaded) }\n    }, [])\n\n    return (\n        <Element\n            className={(className ? className + ' ' :  '') + 'video'}\n            style={_animation}\n        >\n            <video\n                className=\"video__element\"\n                style={{ opacity: isVideoLoaded ? 1 : 0 }}\n                onTouchStart={onTouchStart}\n                onTouchEnd={onTouchEnd}\n                ref={videoRef}\n                // width=\"250\"\n                // height=\"400\"\n                playsInline\n                autoPlay\n                muted\n                loop\n            >\n                {\n                    video.mp4 && <source src={video.mp4} type=\"video/mp4\" />\n                }\n                {\n                    video.webm && <source src={video.webm} type=\"video/webm\" />\n                }\n                Your browser does not support the video tag.\n            </video>\n            {\n                !isVideoLoaded &&\n                    <div\n                        className=\"video__overlay\"\n                        style={{ opacity: isVideoLoaded ? 0 : 1 }}\n                    >\n                        <div className=\"video__overlay__loader loader\" />\n                    </div>\n            }\n        </Element>\n    )\n}\n\nVideo.propTypes = {\n    className: string,\n    animation: object,\n    video: object.isRequired,\n    onTouchStart: func,\n    onTouchEnd: func\n}\n\nexport default Video\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAPA;AAQA;AACA;AACA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;;;;A","sourceRoot":""}